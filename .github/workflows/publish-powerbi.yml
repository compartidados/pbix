name: Publicar arquivos Power BI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "PowerShell $($PSVersionTable.PSVersion)"
        # Criar diretório pbix-files caso não exista
        if (-not (Test-Path "pbix-files")) {
          New-Item -Path "pbix-files" -ItemType Directory
          Write-Host "Diretório pbix-files criado"
        }
    
    - name: Install PowerBI modules
      shell: pwsh
      run: |
        # Instalar NuGet com fonte explícita
        Install-PackageProvider -Name NuGet -Force -Scope CurrentUser -Source "https://www.nuget.org/api/v2"
        
        # Configurar PSGallery como confiável
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        
        # Instalar módulo Power BI
        Install-Module -Name MicrosoftPowerBIMgmt -Force -Scope CurrentUser -AllowClobber
        
        Write-Host "Módulo Power BI instalado com sucesso"
        Get-Module -ListAvailable MicrosoftPowerBIMgmt* | Format-Table Name, Version
    
    - name: Deploy to Power BI
      shell: pwsh
      env:
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        TENANT_ID: "eaaf39f1-6f65-42cc-bfe2-b9c336aaf2a2"
        WORKSPACE_ID: "37ac69ab-ad7a-4540-af1d-baa525ee3c7f"
      run: |
        # Autenticar com Service Principal
        $password = ConvertTo-SecureString $env:CLIENT_SECRET -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($env:CLIENT_ID, $password)
        
        try {
          # Conectar ao Power BI
          Write-Host "Conectando ao Power BI Service..."
          Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId $env:TENANT_ID
          
          # Encontrar arquivos PBIX
          $files = Get-ChildItem -Path "." -Recurse -Filter "*.pbix" -File
          
          if ($files.Count -eq 0) {
            Write-Host "Nenhum arquivo PBIX encontrado no repositório"
            exit 0
          }
          
          Write-Host "Encontrados $($files.Count) arquivos PBIX para publicação"
          
          # Publicar cada arquivo
          foreach ($file in $files) {
            $fileName = $file.Name
            $filePath = $file.FullName
            
            Write-Host "Publicando arquivo: $fileName (caminho: $filePath)"
            try {
              New-PowerBIReport -Path $filePath -WorkspaceId $env:WORKSPACE_ID -ConflictAction CreateOrOverwrite
              Write-Host "✅ Arquivo $fileName publicado com sucesso"
            } catch {
              Write-Host "❌ Erro ao publicar $fileName : $_"
              Write-Host "Detalhes da exceção:"
              $_.Exception | Format-List -Force
              # Continuar mesmo com erro (remover "exit 1" para tentar publicar todos os arquivos)
            }
          }
          
          Write-Host "Processo de publicação finalizado!"
        } catch {
          Write-Host "Erro na execução: $_"
          Write-Host "Detalhes da exceção:"
          $_.Exception | Format-List -Force
          exit 1
        }
