name: Publicar arquivos Power BI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup PowerShell e diret√≥rio
      shell: pwsh
      run: |
        Write-Host "Vers√£o do PowerShell: $($PSVersionTable.PSVersion)"
        # Criar diret√≥rio pbix-files se n√£o existir
        if (-not (Test-Path "pbix-files")) {
          New-Item -Path "pbix-files" -ItemType Directory -Force
          Write-Host "Diret√≥rio pbix-files criado"
        }
        
        # Listar estrutura do reposit√≥rio
        Get-ChildItem -Recurse -Depth 2 | Select-Object FullName
    
    - name: Instalar m√≥dulo PowerBI (m√©todo alternativo)
      shell: pwsh
      run: |
        # Atualizar o PSGallery sem depender do NuGet
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        
        # Definir PSGallery como confi√°vel
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        
        # Instalar PowerShellGet
        Write-Host "Instalando PowerShellGet..."
        Install-Module PowerShellGet -Force -AllowClobber -Scope CurrentUser -SkipPublisherCheck
        
        # Instalar m√≥dulo PowerBI
        Write-Host "Instalando m√≥dulo MicrosoftPowerBIMgmt..."
        Install-Module -Name MicrosoftPowerBIMgmt -Force -AllowClobber -Scope CurrentUser -SkipPublisherCheck
        
        Write-Host "Verificando m√≥dulos instalados:"
        Get-Module -Name MicrosoftPowerBIMgmt* -ListAvailable | Format-Table Name, Version
    
    - name: Deploy to Power BI
      shell: pwsh
      env:
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        TENANT_ID: "eaaf39f1-6f65-42cc-bfe2-b9c336aaf2a2"
        WORKSPACE_ID: "37ac69ab-ad7a-4540-af1d-baa525ee3c7f"
      run: |
        Write-Host "Iniciando processo de publica√ß√£o..."
        
        try {
          # Criar credencial segura
          $password = ConvertTo-SecureString $env:CLIENT_SECRET -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($env:CLIENT_ID, $password)
          
          # Conectar ao Power BI
          Write-Host "Conectando ao Power BI Service..."
          Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId $env:TENANT_ID
          
          # Procurar arquivos PBIX no reposit√≥rio
          Write-Host "Procurando arquivos PBIX..."
          $files = Get-ChildItem -Path "." -Recurse -Filter "*.pbix" -File
          
          if ($files.Count -eq 0) {
            Write-Host "‚ö†Ô∏è Nenhum arquivo PBIX encontrado no reposit√≥rio"
            exit 0
          }
          
          Write-Host "üîç Encontrados $($files.Count) arquivos PBIX para publica√ß√£o:"
          $files | ForEach-Object { Write-Host " - $($_.FullName)" }
          
          # Publicar cada arquivo
          foreach ($file in $files) {
            $fileName = $file.Name
            $filePath = $file.FullName
            
            Write-Host "üì§ Publicando arquivo: $fileName"
            try {
              New-PowerBIReport -Path $filePath -WorkspaceId $env:WORKSPACE_ID -ConflictAction CreateOrOverwrite
              Write-Host "‚úÖ Arquivo $fileName publicado com sucesso!"
            } catch {
              Write-Host "‚ùå Erro ao publicar $fileName"
              Write-Host "Detalhes do erro: $_"
              # Continue para o pr√≥ximo arquivo mesmo se houver erro
            }
          }
          
          Write-Host "üéâ Processo de publica√ß√£o conclu√≠do!"
        } catch {
          Write-Host "‚ùå Erro geral na execu√ß√£o do script: $_"
          exit 1
        }
